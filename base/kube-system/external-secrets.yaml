---
# Source: kubernetes-external-secrets/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: external-secrets-kubernetes-external-secrets
  namespace: kube-system
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-4.0.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  resourceNames: ["externalsecrets.kubernetes-client.io"]
  verbs: ["get", "update"]
- apiGroups: ["kubernetes-client.io"]
  resources: ["externalsecrets"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["kubernetes-client.io"]
  resources: ["externalsecrets/status"]
  verbs: ["get", "update"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"]
---
# Source: kubernetes-external-secrets/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-kubernetes-external-secrets
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-4.0.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-kubernetes-external-secrets
subjects:
- name: eksctl-sa
  namespace: "kube-system"
  kind: ServiceAccount
---
# Source: kubernetes-external-secrets/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-kubernetes-external-secrets-auth
  namespace: kube-system
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-4.0.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- name: eksctl-sa
  namespace: "kube-system"
  kind: ServiceAccount
---
# Source: kubernetes-external-secrets/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: external-secrets-kubernetes-external-secrets
  namespace: kube-system
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-4.0.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: kubernetes-external-secrets
  ports:
  - protocol: TCP
    port: 3001
    name: prometheus
    targetPort: prometheus
---
# Source: kubernetes-external-secrets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kube-system
  name: external-secrets-kubernetes-external-secrets
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-4.0.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
  annotations:
    fluxcd.io/automated: 'true'
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: kubernetes-external-secrets
      app.kubernetes.io/instance: external-secrets
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubernetes-external-secrets
        app.kubernetes.io/instance: external-secrets
    spec:
      serviceAccountName: eksctl-sa
      containers:
      - name: kubernetes-external-secrets
        image: "godaddy/kubernetes-external-secrets:4.0.0"
        ports:
        - name: prometheus
          containerPort: 3001
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 10m
            memory: 100Mi
        env:
        - name: "AWS_DEFAULT_REGION"
          value: "us-east-1"
        - name: "AWS_REGION"
          value: "us-east-1"
        - name: "LOG_LEVEL"
          value: "error"
        - name: "METRICS_PORT"
          value: "3001"
        - name: "POLLER_INTERVAL_MILLISECONDS"
          value: "60000"
          # Params for env vars populated from k8s secrets
      securityContext:
        fsGroup: 65534
        runAsNonRoot: false
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: externalsecrets.kubernetes-client.io
  namespace: kube-system
  annotations:
    # for helm v2 backwards compatibility
    helm.sh/hook: crd-install
    # used in e2e testing
    app.kubernetes.io/managed-by: helm
spec:
  group: kubernetes-client.io
  version: v1
  scope: Namespaced

  names:
    shortNames:
    - es
    kind: ExternalSecret
    plural: externalsecrets
    singular: externalsecret

  additionalPrinterColumns:
  - JSONPath: .status.lastSync
    name: Last Sync
    type: date
  - JSONPath: .status.status
    name: status
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date

  validation:
    openAPIV3Schema:
      properties:
        spec:
          type: object
          properties:
            template:
              description: Template which will be deep merged without mutating any
                existing fields. into generated secret, can be used to set for example
                annotations or type on the generated secret
              type: object
            backendType:
              type: string
              enum:
              - secretsManager
              - systemManager
              - vault
              - azureKeyVault
              - gcpSecretsManager
              - alicloudSecretsManager
            vaultRole:
              type: string
            vaultMountPoint:
              type: string
            keyVaultName:
              type: string
            key:
              type: string
            dataFrom:
              type: array
              items:
                type: string
            data:
              type: array
              items:
                type: object
                properties:
                  key:
                    description: Secret key in backend
                    type: string
                  name:
                    description: Name set for this key in the generated secret
                    type: string
                  property:
                    description: Property to extract if secret in backend is a JSON
                      object
                  isBinary:
                    description: >-
                      You must set this to true if configuring an item for a binary
                      file stored in Azure KeyVault.
                      Azure automatically base64 encodes binary files and setting
                      this to true ensures External Secrets
                      does not base64 encode the base64 encoded binary files.
                    type: boolean
                required:
                - name
                - key
            roleArn:
              type: string
          oneOf:
          - properties:
              backendType:
                enum:
                - secretsManager
                - systemManager
          - properties:
              backendType:
                enum:
                - vault
            required:
            - vaultRole
            - vaultMountPoint
          - properties:
              backendType:
                enum:
                - azureKeyVault
            required:
            - keyVaultName
          - properties:
              backendType:
                enum:
                - gcpSecretsManager
          - properties:
              backendType:
                enum:
                - alicloudSecretsManager
          anyOf:
          - required:
            - data
          - required:
            - dataFrom
  subresources:
    status: {}
